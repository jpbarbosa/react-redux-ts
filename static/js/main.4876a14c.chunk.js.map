{"version":3,"sources":["types/tasks.ts","actions/tasks.ts","hooks/useTasks.ts","components/Header.tsx","components/tasks/Form.tsx","hooks/useForm.ts","components/tasks/New.tsx","components/tasks/Item.tsx","components/tasks/List.tsx","components/App.tsx","data/tasks.ts","reducers/tasks.ts","reducers/index.ts","store.ts","index.tsx"],"names":["ActionType","fetchTasks","type","FETCH_TASKS","createTask","task","CREATE_TASK","payload","id","uuidv4","updateTask","UPDATE_TASK","removeTask","REMOVE_TASK","setActiveTask","SET_ACTIVE_TASK","useTasks","fetch","tasks","useSelector","state","dispatch","useDispatch","useEffect","handleAction","active","undefined","handleRemove","handleActiveTask","Header","className","all","length","TaskForm","activeTask","focus","useRef","initialState","useState","formState","setFormState","current","handleChange","event","target","name","value","handleSubmit","preventDefault","useForm","onSubmit","onChange","placeholder","ref","TaskNew","onClick","TaskItem","TaskList","map","App","reducers","combineReducers","action","initialTasks","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4876a14c.chunk.js","sourcesContent":["export interface Task {\n  id?: string;\n  name: string;\n}\n\nexport interface TasksState {\n  active?: Task;\n  all: Task[];\n}\n\nexport enum ActionType {\n  FETCH_TASKS,\n  CREATE_TASK,\n  UPDATE_TASK,\n  REMOVE_TASK,\n  SET_ACTIVE_TASK,\n}\n\nexport interface TaskAction {\n  type: ActionType;\n  payload: Task;\n}\n\nexport interface TaskActionCreator {\n  type: ActionType;\n  payload?: Task;\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport {\n  TaskActionCreator as ActionCreator,\n  ActionType,\n  Task,\n} from '../types/tasks';\n\nexport const fetchTasks = (): ActionCreator => {\n  return {\n    type: ActionType.FETCH_TASKS,\n  };\n};\n\nexport const createTask = (task: Task): ActionCreator => {\n  return {\n    type: ActionType.CREATE_TASK,\n    payload: {\n      ...task,\n      id: uuidv4(),\n    },\n  };\n};\n\nexport const updateTask = (task: Task): ActionCreator => {\n  return {\n    type: ActionType.UPDATE_TASK,\n    payload: task,\n  };\n};\n\nexport const removeTask = (task: Task): ActionCreator => {\n  return {\n    type: ActionType.REMOVE_TASK,\n    payload: task,\n  };\n};\n\nexport const setActiveTask = (task?: Task): ActionCreator => {\n  return {\n    type: ActionType.SET_ACTIVE_TASK,\n    payload: task,\n  };\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StoreState } from '../types/store';\nimport { Task, TasksState } from '../types/tasks';\nimport {\n  fetchTasks,\n  createTask,\n  updateTask,\n  removeTask,\n  setActiveTask,\n} from '../actions/tasks';\n\nexport const useTasks = (fetch = false) => {\n  const tasks = useSelector<StoreState, TasksState>((state) => state.tasks);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (fetch) {\n      dispatch(fetchTasks());\n    }\n  }, [fetch, dispatch]);\n\n  const handleAction = (task: Task) => {\n    if (tasks.active?.id) {\n      dispatch(updateTask(task));\n    } else {\n      dispatch(createTask(task));\n    }\n    dispatch(setActiveTask(undefined));\n  };\n\n  const handleRemove = (task: Task) => {\n    dispatch(removeTask(task));\n  };\n\n  const handleActiveTask = (task: Task) => {\n    dispatch(setActiveTask(task));\n  };\n\n  return { tasks, handleAction, handleRemove, handleActiveTask };\n};\n","import React from 'react';\nimport { useTasks } from '../hooks/useTasks';\n\nexport const Header: React.FC = () => {\n  const { tasks } = useTasks();\n\n  return (\n    <header>\n      <h1>\n        <div className=\"title\">React Basic CRUD</div>\n        <div className=\"subtitle\">With Redux And TypeScript</div>\n      </h1>\n      <div className=\"counter\">{tasks.all.length}</div>\n    </header>\n  );\n};\n","import React, { useRef } from 'react';\nimport { Task } from '../../types/tasks';\nimport { useForm } from '../../hooks/useForm';\n\ninterface IProps {\n  activeTask: Task;\n  handleAction: Function;\n}\n\nexport const TaskForm: React.FC<IProps> = ({ activeTask, handleAction }) => {\n  const focus = useRef<HTMLInputElement>(null);\n  const { formState, handleChange, handleSubmit } = useForm<Task>(\n    activeTask,\n    handleAction,\n    focus\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={formState.name}\n        onChange={handleChange}\n        placeholder=\"Task description\"\n        ref={focus}\n      />\n      <input type=\"submit\" />\n    </form>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nexport const useForm = <T>(\n  initialState: T,\n  handleAction: Function,\n  focus: React.RefObject<HTMLInputElement>\n) => {\n  const [formState, setFormState] = useState<T>(initialState);\n\n  useEffect(() => {\n    focus.current?.focus();\n  }, [focus]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState({ ...formState, [event.target.name]: event.target.value });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    handleAction(formState);\n  };\n\n  return { formState, handleChange, handleSubmit };\n};\n","import React from 'react';\nimport { TaskForm } from './Form';\nimport { useTasks } from '../../hooks/useTasks';\n\nexport const TaskNew: React.FC = () => {\n  const { tasks, handleAction, handleActiveTask } = useTasks();\n\n  return (\n    <div className=\"new\">\n      {tasks.active && tasks.active.id === undefined ? (\n        <TaskForm activeTask={tasks.active} handleAction={handleAction} />\n      ) : (\n        <button\n          className=\"bt-new\"\n          onClick={() => handleActiveTask({ name: '' })}\n        >\n          New Task\n        </button>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useTasks } from '../../hooks/useTasks';\nimport { Task } from '../../types/tasks';\nimport { TaskForm } from './Form';\n\ninterface IProps {\n  task: Task;\n}\n\nexport const TaskItem: React.FC<IProps> = ({ task }) => {\n  const { tasks, handleAction, handleRemove, handleActiveTask } = useTasks();\n\n  return (\n    <>\n      {tasks.active && tasks.active.id === task.id ? (\n        <TaskForm activeTask={tasks.active} handleAction={handleAction} />\n      ) : (\n        <div className=\"item\">\n          <span onClick={() => handleActiveTask(task)}>{task.name}</span>\n          <button className=\"bt-remove\" onClick={() => handleRemove(task)}>\n            X\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TaskItem } from './Item';\nimport { useTasks } from '../../hooks/useTasks';\n\nexport const TaskList: React.FC = () => {\n  const { tasks } = useTasks(true);\n\n  return (\n    <div className=\"list\">\n      <ul>\n        {tasks.all.map((task) => (\n          <li key={task.id}>\n            <TaskItem task={task} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Header } from './Header';\nimport { TaskNew } from './tasks/New';\nimport { TaskList } from './tasks/List';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"content\">\n        <TaskNew />\n        <TaskList />\n      </div>\n    </div>\n  );\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { Task } from '../types/tasks';\n\nexport const tasks: Task[] = [\n  {\n    id: uuidv4(),\n    name: 'Wake Up',\n  },\n  {\n    id: uuidv4(),\n    name: 'Work',\n  },\n  {\n    id: uuidv4(),\n    name: 'Sleep',\n  },\n  {\n    id: uuidv4(),\n    name: 'Repeat',\n  },\n];\n","import { tasks as initialTasks } from '../data/tasks';\nimport { TasksState, ActionType, TaskAction } from '../types/tasks';\n\nconst initialState: TasksState = {\n  active: undefined,\n  all: [],\n};\n\nexport const tasks = (\n  state: TasksState = initialState,\n  action: TaskAction\n): TasksState => {\n  switch (action.type) {\n    case ActionType.FETCH_TASKS:\n      return { ...state, all: initialTasks };\n    case ActionType.CREATE_TASK:\n      return { ...state, all: [...state.all, action.payload] };\n    case ActionType.UPDATE_TASK:\n      return {\n        ...state,\n        all: state.all.map((task) =>\n          task.id === state.active?.id ? action.payload : task\n        ),\n      };\n    case ActionType.REMOVE_TASK:\n      return {\n        ...state,\n        all: state.all.filter((task) => task.id !== action.payload.id),\n      };\n    case ActionType.SET_ACTIVE_TASK:\n      return {\n        ...state,\n        active: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { StoreState } from '../types/store';\nimport { tasks } from './tasks';\n\nexport const reducers = combineReducers<StoreState>({\n  tasks,\n});\n","import { createStore } from 'redux';\nimport { reducers } from './reducers';\n\nexport const store = createStore(reducers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './assets/index.css';\nimport { App } from './components/App';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}